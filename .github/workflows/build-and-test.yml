# Workflow name
name: Build and Test cfaker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc  # MinGW
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install MinGW (Windows)
      if: matrix.os == 'windows-latest' && matrix.c_compiler == 'gcc'
      run: |
        choco install mingw -y
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

    - name: Install Clang (Linux and macOS)
      if: matrix.c_compiler == 'clang' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y clang
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install llvm
          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Main library only)
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}

    - name: Build Main Library
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload Library Artifact
      uses: actions/upload-artifact@v4  # Updated to v4
      with:
        name: cfaker-lib-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
        path: ${{ github.workspace }}/build/libcfaker.*

  test:
    needs: build  # Depends on the build job
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc  # MinGW
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install MinGW (Windows)
      if: matrix.os == 'windows-latest' && matrix.c_compiler == 'gcc'
      run: |
        choco install mingw -y
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

    - name: Install Clang (Linux and macOS)
      if: matrix.c_compiler == 'clang' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y clang
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install llvm
          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
        fi

    - name: Download Library Artifact
      uses: actions/download-artifact@v4  # Updated to v4
      with:
        name: cfaker-lib-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
        path: ${{ github.workspace }}/build/

    - name: Configure CMake for Tests
      run: |
        cmake -B ${{ github.workspace }}/test/build \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}/test

    - name: Build Tests
      run: cmake --build ${{ github.workspace }}/test/build --config ${{ matrix.build_type }}

    - name: Run Tests
      working-directory: ${{ github.workspace }}/test/build
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
